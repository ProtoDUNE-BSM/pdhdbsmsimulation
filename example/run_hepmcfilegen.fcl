#include "services_dune.fcl"
#include "hepmcfilegen.fcl"
#include "largeantmodules.fcl"
#include "detsimmodules.fcl"

process_name: HepMCFileGen

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "hepmc_truthhists_mupi_hdgeom.root" }
  TimeTracker:  {}
  RandomNumberGenerator: {} #ART native random number generator
  #@table::protodune_simulation_services
  @table::protodunehd_simulation_services
}


#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   5000           # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

  producers:
  {
    generator: @local::standard_hepmcfilegen	  
    #largeant:  @local::standard_largeant	  
    #daq:       @local::standard_simwire       
    #daq:       @local::dune_detsim       
    rns:       { module_type: "RandomNumberSaver" }
  }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 #simulate: [ generator, largeant, daq, rns ] 
 #simulate: [ generator, largeant, rns ] 
 simulate: [ generator, rns ] 
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}
physics.producers.daq.InputFieldRespSamplingPeriod: 198.
physics.producers.daq.ShapeTimeConst: 3000.
physics.producers.daq.ADCPerPCAtLowestASICGain: 5211. #4.7
physics.producers.daq.ASICGainInMVPerFC: 14.
physics.producers.daq.NoiseNchToSim: 100
physics.producers.daq.NoiseModelChoice: "ModUBooNE"
physics.producers.daq.NoiseFluctChoice: "SimplePoisson"
physics.producers.daq.FieldRespTOffset: [32, 28]
physics.producers.daq.CalibRespTOffset: [0, 0]
physics.producers.daq.Ind3DCorrection: 1.5
physics.producers.daq.IndFieldParams: [28, 0.5, 1.1]
physics.producers.daq.ColFieldParams: [32, 1]
physics.producers.daq.NoiseModelPar: [4450.,-530.,280.,110.,-0.85,18.,0.064,74.]
physics.producers.daq.NoiseFluctPar:[ 0.28, 0, 0 ]


#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "hepmc_gen.root" #default file name, can override from command line with -o or --output
 }
}
